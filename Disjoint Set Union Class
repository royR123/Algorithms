class DSU{
    int n;
    vector<int> par;
    vector<int> size_count;
public:
    DSU(int n){
        this->n = n;
        par.resize(n);
        size_count.resize(n);
        for(int i = 0 ; i < n ; i++){
            par[i] = i;
            size_count[i] = 1;
        }
    }
    int findRoot(int node){
        if(par[node] == node){
            return node;
        }
        return par[node] = findRoot(par[node]);
    }
    void merge(int a,int b){
        a = findRoot(a);
        b = findRoot(b);
        if(a == b)return;
        if(size_count[a] > size_count[b]){
            par[b] = a;
            size_count[a] += size_count[b];
        }else{
            par[a] = b;
            size_count[b] += size_count[a];
        }
    }
    bool inSameGroup(int a,int b){
        a = findRoot(a);
        b = findRoot(b);
        return a == b;
    }
};
