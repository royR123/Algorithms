class TreeAncestor {
public:
    int n ;
    vector<int> parent;
    int up[50001][20]; //  array[i][j] stores the node i 's 2 ^ (j)th ancestor
    vector<vector<int> > adj; // adjacency list for tree
    void binaryLifting(int node , int par){
        // node 2^0 = 1 ancestor is parent
        up[node][0] = par ;

        // now for this node all ancestor we find by previously calculated values.
        for(int i = 1 ; i < 20 ; i++){
            if(up[node][i-1] != -1){
                up[node][i] = up[up[node][i-1]][i-1];
            }else{
                up[node][i] = -1;
            }
        }
        
        // do this for all of its child nodes
        for(auto child : adj[node]){
            if(child == par)continue;
            binaryLifting(child , node);
        }
    }
    TreeAncestor(int n, vector<int>& parent) {
        this->n = n;
        this->parent = parent;
        int root = 0;
        adj.resize(n);
        for(int i = 0 ; i < parent.size() ; i++){
            if(parent[i] == -1)continue;
            adj[parent[i]].push_back(i);
            adj[i].push_back(parent[i]);
        }
        binaryLifting(0 , -1);
        // for(int i = 0 ; i < n ; i++){
        //     cout << "for i " << i << " : ";
        //     for(int j = 0 ; j < 20 ; j++){
        //         cout << up[i][j] << " ";
        //     }
        //     cout << endl;
        // }
    }
    
    int getKthAncestor(int node, int k) {
        if(node == -1 || k == 0){
            return node;
        }

        // To find kth ancestor we recursively jump 2 's power till reaches the base case
        for(int i = 19 ; i >= 0 ; i--){
            if(k >= (1 << i)){
                return getKthAncestor(up[node][i] , k - (1 << i));
            }
        }
        return -1;
    }
};
